{"version":3,"file":"static/js/653.e4954344.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Movies/Movies.module.css?9f30","components/Movies/Movies.jsx","components/api/movieAPI.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Movies_container__alxt6\",\"navbar\":\"Movies_navbar__8IvES\"};","// Movies.jsx\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { searchMovies } from '../api/movieAPI';\r\nimport styles from './Movies.module.css';\r\n\r\nconst Movies = () => {\r\n  const [query, setQuery] = useState('');\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleSearch = async event => {\r\n    event.preventDefault();\r\n    if (!query) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await searchMovies(query);\r\n      setMovies(data.results);\r\n    } catch (error) {\r\n      console.error('Error fetching movies:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <nav className={styles.navbar}>\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/movies\">Movies</Link>\r\n      </nav>\r\n\r\n      <form onSubmit={handleSearch}>\r\n        <input\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={e => setQuery(e.target.value)}\r\n          placeholder=\"Wyszukaj film...\"\r\n        />\r\n        <button type=\"submit\">Szukaj</button>\r\n      </form>\r\n\r\n      {isLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <ul>\r\n          {movies.map(movie => (\r\n            <li key={movie.id}>\r\n              <Link to={`/movies/${movie.id}`}>\r\n                {movie.title} ({new Date(movie.release_date).getFullYear()})\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","const API_KEY = '0dbe1ca7342e7e9210eecd0a9bce9cbe';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\n/**\r\n * Wykonuje zapytanie do TheMovieDB API.\r\n * @param {string} endpoint - The endpoint to call.\r\n * @param {Object} params - Additional query parameters.\r\n * @returns {Promise} - Promise with the response data.\r\n */\r\nconst fetchFromTMDB = async (endpoint, params = {}) => {\r\n  // Dodawanie klucza API do parametrów zapytania\r\n  params['api_key'] = API_KEY;\r\n\r\n  // Tworzenie stringa z parametrów zapytania\r\n  const queryParams = new URLSearchParams(params).toString();\r\n\r\n  const url = `${BASE_URL}${endpoint}?${queryParams}`;\r\n  const response = await fetch(url);\r\n  if (!response.ok) {\r\n    throw new Error(`TMDB API request failed: ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n/**\r\n * Pobiera filmy z trendów.\r\n * @returns {Promise} - Promise with trending movies.\r\n */\r\nexport const fetchTrendingMovies = () => {\r\n  return fetchFromTMDB('/trending/movie/day');\r\n};\r\n\r\n/**\r\n * Wyszukuje filmy na podstawie zapytania.\r\n * @param {string} query - Query string for the movie search.\r\n * @returns {Promise} - Promise with the search results.\r\n */\r\nexport const searchMovies = query => {\r\n  return fetchFromTMDB('/search/movie', { query: encodeURIComponent(query) });\r\n};\r\n\r\n/**\r\n * Pobiera szczegółowe informacje o filmie.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie details.\r\n */\r\nexport const fetchMovieDetails = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}`);\r\n};\r\n\r\n/**\r\n * Pobiera informacje o obsadzie filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie cast info.\r\n */\r\nexport const fetchMovieCast = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}/credits`);\r\n};\r\n\r\n/**\r\n * Pobiera recenzje filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie reviews.\r\n */\r\nexport const fetchMovieReviews = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}/reviews`);\r\n};\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","movies","setMovies","_useState5","_useState6","isLoading","setIsLoading","handleSearch","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","event","data","_context","prev","next","preventDefault","abrupt","searchMovies","sent","results","t0","console","error","finish","stop","_x","apply","arguments","_jsxs","className","styles","children","_jsx","Link","to","onSubmit","type","value","onChange","e","target","placeholder","map","movie","concat","id","title","Date","release_date","getFullYear","API_KEY","BASE_URL","fetchFromTMDB","endpoint","params","queryParams","url","response","_args","length","undefined","URLSearchParams","toString","fetch","ok","Error","status","json","fetchTrendingMovies","encodeURIComponent","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","fn","self","this","args","err"],"sourceRoot":""}