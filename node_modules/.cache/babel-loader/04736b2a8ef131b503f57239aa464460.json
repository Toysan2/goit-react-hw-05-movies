{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/toysa/Documents/GitHub/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\toysa\\\\Documents\\\\GitHub\\\\goit-react-hw-05-movies\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";var API_KEY='0dbe1ca7342e7e9210eecd0a9bce9cbe';var BASE_URL='https://api.themoviedb.org/3';/**\r\n * Wykonuje zapytanie do TheMovieDB API.\r\n * @param {string} endpoint - The endpoint to call.\r\n * @param {Object} params - Additional query parameters.\r\n * @returns {Promise} - Promise with the response data.\r\n */var fetchFromTMDB=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoint){var params,queryParams,url,response,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:params=_args.length>1&&_args[1]!==undefined?_args[1]:{};// Dodawanie klucza API do parametrów zapytania\nparams['api_key']=API_KEY;// Tworzenie stringa z parametrów zapytania\nqueryParams=new URLSearchParams(params).toString();url=\"\".concat(BASE_URL).concat(endpoint,\"?\").concat(queryParams);_context.next=6;return fetch(url);case 6:response=_context.sent;if(response.ok){_context.next=9;break;}throw new Error(\"TMDB API request failed: \".concat(response.status));case 9:return _context.abrupt(\"return\",response.json());case 10:case\"end\":return _context.stop();}}},_callee);}));return function fetchFromTMDB(_x){return _ref.apply(this,arguments);};}();/**\r\n * Pobiera filmy z trendów.\r\n * @returns {Promise} - Promise with trending movies.\r\n */export var fetchTrendingMovies=function fetchTrendingMovies(){return fetchFromTMDB('/trending/movie/day');};/**\r\n * Wyszukuje filmy na podstawie zapytania.\r\n * @param {string} query - Query string for the movie search.\r\n * @returns {Promise} - Promise with the search results.\r\n */export var searchMovies=function searchMovies(query){return fetchFromTMDB('/search/movie',{query:encodeURIComponent(query)});};/**\r\n * Pobiera szczegółowe informacje o filmie.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie details.\r\n */export var fetchMovieDetails=function fetchMovieDetails(movieId){return fetchFromTMDB(\"/movie/\".concat(movieId));};/**\r\n * Pobiera informacje o obsadzie filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie cast info.\r\n */export var fetchMovieCast=function fetchMovieCast(movieId){return fetchFromTMDB(\"/movie/\".concat(movieId,\"/credits\"));};/**\r\n * Pobiera recenzje filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie reviews.\r\n */export var fetchMovieReviews=function fetchMovieReviews(movieId){return fetchFromTMDB(\"/movie/\".concat(movieId,\"/reviews\"));};","map":{"version":3,"names":["API_KEY","BASE_URL","fetchFromTMDB","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","endpoint","params","queryParams","url","response","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","URLSearchParams","toString","concat","fetch","sent","ok","Error","status","abrupt","json","stop","_x","apply","fetchTrendingMovies","searchMovies","query","encodeURIComponent","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews"],"sources":["C:/Users/toysa/Documents/GitHub/goit-react-hw-05-movies/src/components/api/movieAPI.jsx"],"sourcesContent":["const API_KEY = '0dbe1ca7342e7e9210eecd0a9bce9cbe';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\n/**\r\n * Wykonuje zapytanie do TheMovieDB API.\r\n * @param {string} endpoint - The endpoint to call.\r\n * @param {Object} params - Additional query parameters.\r\n * @returns {Promise} - Promise with the response data.\r\n */\r\nconst fetchFromTMDB = async (endpoint, params = {}) => {\r\n  // Dodawanie klucza API do parametrów zapytania\r\n  params['api_key'] = API_KEY;\r\n\r\n  // Tworzenie stringa z parametrów zapytania\r\n  const queryParams = new URLSearchParams(params).toString();\r\n\r\n  const url = `${BASE_URL}${endpoint}?${queryParams}`;\r\n  const response = await fetch(url);\r\n  if (!response.ok) {\r\n    throw new Error(`TMDB API request failed: ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n/**\r\n * Pobiera filmy z trendów.\r\n * @returns {Promise} - Promise with trending movies.\r\n */\r\nexport const fetchTrendingMovies = () => {\r\n  return fetchFromTMDB('/trending/movie/day');\r\n};\r\n\r\n/**\r\n * Wyszukuje filmy na podstawie zapytania.\r\n * @param {string} query - Query string for the movie search.\r\n * @returns {Promise} - Promise with the search results.\r\n */\r\nexport const searchMovies = query => {\r\n  return fetchFromTMDB('/search/movie', { query: encodeURIComponent(query) });\r\n};\r\n\r\n/**\r\n * Pobiera szczegółowe informacje o filmie.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie details.\r\n */\r\nexport const fetchMovieDetails = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}`);\r\n};\r\n\r\n/**\r\n * Pobiera informacje o obsadzie filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie cast info.\r\n */\r\nexport const fetchMovieCast = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}/credits`);\r\n};\r\n\r\n/**\r\n * Pobiera recenzje filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie reviews.\r\n */\r\nexport const fetchMovieReviews = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}/reviews`);\r\n};\r\n"],"mappings":"uSAAA,GAAM,CAAAA,OAAO,CAAG,kCAAkC,CAClD,GAAM,CAAAC,QAAQ,CAAG,8BAA8B,CAE/C;AACA;AACA;AACA;AACA;AACA,GACA,GAAM,CAAAC,aAAa,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,CAAAC,IAAA,CAAG,SAAAC,QAAOC,QAAQ,MAAAC,MAAA,CAAAC,WAAA,CAAAC,GAAA,CAAAC,QAAA,CAAAC,KAAA,CAAAC,SAAA,QAAAT,mBAAA,CAAAU,IAAA,UAAAC,SAAAC,QAAA,kBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAEV,MAAM,CAAAI,KAAA,CAAAO,MAAA,IAAAP,KAAA,MAAAQ,SAAA,CAAAR,KAAA,IAAG,CAAC,CAAC,CAChD;AACAJ,MAAM,CAAC,SAAS,CAAC,CAAGT,OAAO,CAE3B;AACMU,WAAW,CAAG,GAAI,CAAAY,eAAe,CAACb,MAAM,CAAC,CAACc,QAAQ,CAAC,CAAC,CAEpDZ,GAAG,IAAAa,MAAA,CAAMvB,QAAQ,EAAAuB,MAAA,CAAGhB,QAAQ,MAAAgB,MAAA,CAAId,WAAW,EAAAO,QAAA,CAAAE,IAAA,SAC1B,CAAAM,KAAK,CAACd,GAAG,CAAC,QAA3BC,QAAQ,CAAAK,QAAA,CAAAS,IAAA,IACTd,QAAQ,CAACe,EAAE,EAAAV,QAAA,CAAAE,IAAA,eACR,IAAI,CAAAS,KAAK,6BAAAJ,MAAA,CAA6BZ,QAAQ,CAACiB,MAAM,CAAE,CAAC,eAAAZ,QAAA,CAAAa,MAAA,UAEzDlB,QAAQ,CAACmB,IAAI,CAAC,CAAC,2BAAAd,QAAA,CAAAe,IAAA,OAAAzB,OAAA,GACvB,kBAbK,CAAAL,aAAaA,CAAA+B,EAAA,SAAA9B,IAAA,CAAA+B,KAAA,MAAApB,SAAA,OAalB,CAED;AACA;AACA;AACA,GACA,MAAO,IAAM,CAAAqB,mBAAmB,CAAG,QAAtB,CAAAA,mBAAmBA,CAAA,CAAS,CACvC,MAAO,CAAAjC,aAAa,CAAC,qBAAqB,CAAC,CAC7C,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,IAAM,CAAAkC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAGC,KAAK,CAAI,CACnC,MAAO,CAAAnC,aAAa,CAAC,eAAe,CAAE,CAAEmC,KAAK,CAAEC,kBAAkB,CAACD,KAAK,CAAE,CAAC,CAAC,CAC7E,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,IAAM,CAAAE,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAGC,OAAO,CAAI,CAC1C,MAAO,CAAAtC,aAAa,WAAAsB,MAAA,CAAWgB,OAAO,CAAE,CAAC,CAC3C,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,IAAM,CAAAC,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAGD,OAAO,CAAI,CACvC,MAAO,CAAAtC,aAAa,WAAAsB,MAAA,CAAWgB,OAAO,YAAU,CAAC,CACnD,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,IAAM,CAAAE,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAGF,OAAO,CAAI,CAC1C,MAAO,CAAAtC,aAAa,WAAAsB,MAAA,CAAWgB,OAAO,YAAU,CAAC,CACnD,CAAC"},"metadata":{},"sourceType":"module"}