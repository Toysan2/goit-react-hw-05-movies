{"ast":null,"code":"const API_KEY = '0dbe1ca7342e7e9210eecd0a9bce9cbe';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n/**\r\n * Wykonuje zapytanie do TheMovieDB API.\r\n * @param {string} endpoint - The endpoint to call.\r\n * @param {Object} params - Additional query parameters.\r\n * @returns {Promise} - Promise with the response data.\r\n */\nconst fetchFromTMDB = async function (endpoint) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Dodawanie klucza API do parametrów zapytania\n  params['api_key'] = API_KEY;\n\n  // Tworzenie stringa z parametrów zapytania\n  const queryParams = new URLSearchParams(params).toString();\n  const url = `${BASE_URL}${endpoint}?${queryParams}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`TMDB API request failed: ${response.status}`);\n  }\n  return response.json();\n};\n\n/**\r\n * Pobiera filmy z trendów.\r\n * @returns {Promise} - Promise with trending movies.\r\n */\nexport const fetchTrendingMovies = () => {\n  return fetchFromTMDB('/trending/movie/day');\n};\n\n/**\r\n * Wyszukuje filmy na podstawie zapytania.\r\n * @param {string} query - Query string for the movie search.\r\n * @returns {Promise} - Promise with the search results.\r\n */\nexport const searchMovies = query => {\n  return fetchFromTMDB('/search/movie', {\n    query: encodeURIComponent(query)\n  });\n};\n\n/**\r\n * Pobiera szczegółowe informacje o filmie.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie details.\r\n */\nexport const fetchMovieDetails = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}`);\n};\n\n/**\r\n * Pobiera informacje o obsadzie filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie cast info.\r\n */\nexport const fetchMovieCast = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}/credits`);\n};\n\n/**\r\n * Pobiera recenzje filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie reviews.\r\n */\nexport const fetchMovieReviews = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}/reviews`);\n};","map":{"version":3,"names":["API_KEY","BASE_URL","fetchFromTMDB","endpoint","params","arguments","length","undefined","queryParams","URLSearchParams","toString","url","response","fetch","ok","Error","status","json","fetchTrendingMovies","searchMovies","query","encodeURIComponent","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews"],"sources":["E:/GoIT/Zad dom/goit-react-hw-05-movies/src/components/api/movieAPI.jsx"],"sourcesContent":["const API_KEY = '0dbe1ca7342e7e9210eecd0a9bce9cbe';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\n/**\r\n * Wykonuje zapytanie do TheMovieDB API.\r\n * @param {string} endpoint - The endpoint to call.\r\n * @param {Object} params - Additional query parameters.\r\n * @returns {Promise} - Promise with the response data.\r\n */\r\nconst fetchFromTMDB = async (endpoint, params = {}) => {\r\n  // Dodawanie klucza API do parametrów zapytania\r\n  params['api_key'] = API_KEY;\r\n\r\n  // Tworzenie stringa z parametrów zapytania\r\n  const queryParams = new URLSearchParams(params).toString();\r\n\r\n  const url = `${BASE_URL}${endpoint}?${queryParams}`;\r\n  const response = await fetch(url);\r\n  if (!response.ok) {\r\n    throw new Error(`TMDB API request failed: ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n/**\r\n * Pobiera filmy z trendów.\r\n * @returns {Promise} - Promise with trending movies.\r\n */\r\nexport const fetchTrendingMovies = () => {\r\n  return fetchFromTMDB('/trending/movie/day');\r\n};\r\n\r\n/**\r\n * Wyszukuje filmy na podstawie zapytania.\r\n * @param {string} query - Query string for the movie search.\r\n * @returns {Promise} - Promise with the search results.\r\n */\r\nexport const searchMovies = query => {\r\n  return fetchFromTMDB('/search/movie', { query: encodeURIComponent(query) });\r\n};\r\n\r\n/**\r\n * Pobiera szczegółowe informacje o filmie.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie details.\r\n */\r\nexport const fetchMovieDetails = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}`);\r\n};\r\n\r\n/**\r\n * Pobiera informacje o obsadzie filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie cast info.\r\n */\r\nexport const fetchMovieCast = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}/credits`);\r\n};\r\n\r\n/**\r\n * Pobiera recenzje filmu.\r\n * @param {number} movieId - The ID of the movie.\r\n * @returns {Promise} - Promise with movie reviews.\r\n */\r\nexport const fetchMovieReviews = movieId => {\r\n  return fetchFromTMDB(`/movie/${movieId}/reviews`);\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,8BAA8B;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,eAAAA,CAAOC,QAAQ,EAAkB;EAAA,IAAhBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAChD;EACAD,MAAM,CAAC,SAAS,CAAC,GAAGJ,OAAO;;EAE3B;EACA,MAAMQ,WAAW,GAAG,IAAIC,eAAe,CAACL,MAAM,CAAC,CAACM,QAAQ,CAAC,CAAC;EAE1D,MAAMC,GAAG,GAAI,GAAEV,QAAS,GAAEE,QAAS,IAAGK,WAAY,EAAC;EACnD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE,4BAA2BH,QAAQ,CAACI,MAAO,EAAC,CAAC;EAChE;EACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,OAAOhB,aAAa,CAAC,qBAAqB,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,YAAY,GAAGC,KAAK,IAAI;EACnC,OAAOlB,aAAa,CAAC,eAAe,EAAE;IAAEkB,KAAK,EAAEC,kBAAkB,CAACD,KAAK;EAAE,CAAC,CAAC;AAC7E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAGC,OAAO,IAAI;EAC1C,OAAOrB,aAAa,CAAE,UAASqB,OAAQ,EAAC,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGD,OAAO,IAAI;EACvC,OAAOrB,aAAa,CAAE,UAASqB,OAAQ,UAAS,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAGF,OAAO,IAAI;EAC1C,OAAOrB,aAAa,CAAE,UAASqB,OAAQ,UAAS,CAAC;AACnD,CAAC"},"metadata":{},"sourceType":"module"}