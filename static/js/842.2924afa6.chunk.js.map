{"version":3,"file":"static/js/842.2924afa6.chunk.js","mappings":"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","sources":["components/Home/Home.jsx","components/api/movieAPI.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { fetchTrendingMovies } from '../api/movieAPI';\nimport styles from '../SharedLayout/SharedLayout.module.css';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    const loadTrendingMovies = async () => {\n      try {\n        const data = await fetchTrendingMovies();\n        setTrendingMovies(data.results);\n      } catch (error) {\n        console.error('Error fetching trending movies:', error);\n      }\n    };\n\n    loadTrendingMovies();\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      <h1>Trendujące Filmy</h1>\n      <ul>\n        {trendingMovies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`}>\n              {movie.title} ({new Date(movie.release_date).getFullYear()})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n","const API_KEY = '0dbe1ca7342e7e9210eecd0a9bce9cbe';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n/**\n * Wykonuje zapytanie do TheMovieDB API.\n * @param {string} endpoint - The endpoint to call.\n * @param {Object} params - Additional query parameters.\n * @returns {Promise} - Promise with the response data.\n */\nconst fetchFromTMDB = async (endpoint, params = {}) => {\n  // Dodawanie klucza API do parametrów zapytania\n  params['api_key'] = API_KEY;\n\n  // Tworzenie stringa z parametrów zapytania\n  const queryParams = new URLSearchParams(params).toString();\n\n  const url = `${BASE_URL}${endpoint}?${queryParams}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`TMDB API request failed: ${response.status}`);\n  }\n  return response.json();\n};\n\n/**\n * Pobiera filmy z trendów.\n * @returns {Promise} - Promise with trending movies.\n */\nexport const fetchTrendingMovies = () => {\n  return fetchFromTMDB('/trending/movie/day');\n};\n\n/**\n * Wyszukuje filmy na podstawie zapytania.\n * @param {string} query - Query string for the movie search.\n * @returns {Promise} - Promise with the search results.\n */\nexport const searchMovies = query => {\n  return fetchFromTMDB('/search/movie', { query: encodeURIComponent(query) });\n};\n\n/**\n * Pobiera szczegółowe informacje o filmie.\n * @param {number} movieId - The ID of the movie.\n * @returns {Promise} - Promise with movie details.\n */\nexport const fetchMovieDetails = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}`);\n};\n\n/**\n * Pobiera informacje o obsadzie filmu.\n * @param {number} movieId - The ID of the movie.\n * @returns {Promise} - Promise with movie cast info.\n */\nexport const fetchMovieCast = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}/credits`);\n};\n\n/**\n * Pobiera recenzje filmu.\n * @param {number} movieId - The ID of the movie.\n * @returns {Promise} - Promise with movie reviews.\n */\nexport const fetchMovieReviews = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}/reviews`);\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["_useState","useState","_useState2","_slicedToArray","trendingMovies","setTrendingMovies","useEffect","loadTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchTrendingMovies","sent","results","t0","console","error","stop","apply","arguments","_jsxs","className","styles","children","_jsx","map","movie","Link","to","concat","id","title","Date","release_date","getFullYear","API_KEY","BASE_URL","fetchFromTMDB","endpoint","params","queryParams","url","response","_args","length","undefined","URLSearchParams","toString","fetch","ok","Error","status","abrupt","json","_x","searchMovies","query","encodeURIComponent","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","fn","self","this","args","err"],"sourceRoot":""}