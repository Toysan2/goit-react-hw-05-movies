{"version":3,"file":"static/js/947.d6075836.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/MovieDetails/MovieDetails.jsx","webpack://goit-react-hw-05-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","components/api/movieAPI.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cast_container__iz+ye\",\"castMember\":\"Cast_castMember__RY3Nk\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../api/movieAPI';\nimport styles from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCast(movieId).then(data => setCast(data.cast));\n  }, [movieId]);\n\n  // Sprawdzanie, czy obsada jest pusta\n  if (cast.length === 0) {\n    return <div className={styles.container}>Sorry, We do not know the cast yet.</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      {cast.map(member => (\n        <div key={member.cast_id} className={styles.castMember}>\n          {member.profile_path ? (\n            <img\n              src={`https://image.tmdb.org/t/p/w500${member.profile_path}`}\n              alt={member.name}\n            />\n          ) : (\n            <img src=\"/path/to/default/image.jpg\" alt=\"Default\" />\n          )}\n          <p>{member.name}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { fetchMovieDetails } from '../api/movieAPI';\nimport Reviews from '../Reviews/Reviews';\nimport Cast from '../Cast/Cast';\nimport styles from '../SharedLayout/SharedLayout.module.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [showReviews, setShowReviews] = useState(false);\n  const [showCast, setShowCast] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchMovieDetails(movieId).then(setMovie);\n  }, [movieId]);\n\n  const handleGoBack = () => navigate(-1);\n  const toggleReviews = () => setShowReviews(!showReviews);\n  const toggleCast = () => setShowCast(!showCast);\n\n  if (!movie) return <div>Loading...</div>;\n\n  return (\n    <div className={styles.container}>\n      <button onClick={handleGoBack}>Go back</button>\n      <h1>{movie.title}</h1>\n      <img\n        src={`https://image.tmdb.org/t/p/original${movie.poster_path}`}\n        alt={movie.title}\n      />\n      <p>\n        <strong>User Score:</strong> {movie.vote_average * 10}%\n      </p>\n      <p>\n        <strong>Overview:</strong> {movie.overview}\n      </p>\n      <p>\n        <strong>Genres:</strong>{' '}\n        {movie.genres.map(genre => genre.name).join(', ')}\n      </p>\n      <h2>Additional Informations</h2>\n      <button onClick={toggleReviews} style={{ marginRight: '20px' }}>Reviews</button>\n      {showReviews && <Reviews movieId={movieId} />}\n      <button onClick={toggleCast}>Cast</button>\n      {showCast && <Cast movieId={movieId} />}\n    </div>\n  );\n};\n\nexport default MovieDetails;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Reviews_container__2j80+\",\"review\":\"Reviews_review__sHbuN\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from '../api/movieAPI';\nimport styles from './Reviews.module.css';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMovieReviews(movieId).then(data => setReviews(data.results));\n  }, [movieId]);\n\n  if (reviews.length === 0) {\n    return (\n      <div className={styles.container}>\n        We don't have any reviews for this movie.\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      {reviews.map(review => (\n        <div key={review.id} className={styles.review}>\n          <h3>{review.author}</h3>\n          <p>{review.content}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Reviews;\n","const API_KEY = '0dbe1ca7342e7e9210eecd0a9bce9cbe';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n/**\n * Wykonuje zapytanie do TheMovieDB API.\n * @param {string} endpoint - The endpoint to call.\n * @param {Object} params - Additional query parameters.\n * @returns {Promise} - Promise with the response data.\n */\nconst fetchFromTMDB = async (endpoint, params = {}) => {\n  // Dodawanie klucza API do parametrów zapytania\n  params['api_key'] = API_KEY;\n\n  // Tworzenie stringa z parametrów zapytania\n  const queryParams = new URLSearchParams(params).toString();\n\n  const url = `${BASE_URL}${endpoint}?${queryParams}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`TMDB API request failed: ${response.status}`);\n  }\n  return response.json();\n};\n\n/**\n * Pobiera filmy z trendów.\n * @returns {Promise} - Promise with trending movies.\n */\nexport const fetchTrendingMovies = () => {\n  return fetchFromTMDB('/trending/movie/day');\n};\n\n/**\n * Wyszukuje filmy na podstawie zapytania.\n * @param {string} query - Query string for the movie search.\n * @returns {Promise} - Promise with the search results.\n */\nexport const searchMovies = query => {\n  return fetchFromTMDB('/search/movie', { query: encodeURIComponent(query) });\n};\n\n/**\n * Pobiera szczegółowe informacje o filmie.\n * @param {number} movieId - The ID of the movie.\n * @returns {Promise} - Promise with movie details.\n */\nexport const fetchMovieDetails = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}`);\n};\n\n/**\n * Pobiera informacje o obsadzie filmu.\n * @param {number} movieId - The ID of the movie.\n * @returns {Promise} - Promise with movie cast info.\n */\nexport const fetchMovieCast = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}/credits`);\n};\n\n/**\n * Pobiera recenzje filmu.\n * @param {number} movieId - The ID of the movie.\n * @returns {Promise} - Promise with movie reviews.\n */\nexport const fetchMovieReviews = movieId => {\n  return fetchFromTMDB(`/movie/${movieId}/reviews`);\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","fetchMovieCast","then","data","length","_jsx","className","styles","children","map","member","_jsxs","profile_path","src","concat","alt","name","cast_id","movie","setMovie","_useState3","_useState4","showReviews","setShowReviews","_useState5","_useState6","showCast","setShowCast","navigate","useNavigate","fetchMovieDetails","onClick","title","poster_path","vote_average","overview","genres","genre","join","style","marginRight","Reviews","Cast","reviews","setReviews","fetchMovieReviews","results","review","author","content","id","API_KEY","BASE_URL","fetchFromTMDB","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","endpoint","params","queryParams","url","response","_args","arguments","_context","prev","next","undefined","URLSearchParams","toString","fetch","sent","ok","Error","status","abrupt","json","stop","_x","apply","fetchTrendingMovies","searchMovies","query","encodeURIComponent","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","fn","self","this","args","err"],"sourceRoot":""}